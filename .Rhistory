?plot
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
# Men's heights are normally distributed with a population mean of 69.0 inches
# and a population standard deviation of 2.8 inches
population_mean <- 69
population_sd <- 2.8
sd_to_fill <- 1
lower_bound <- population_mean - population_sd * sd_to_fill
upper_bound <- population_mean + population_sd * sd_to_fill
# Generates equally spaced values within 4 standard deviations of the mean
# This is used to connect the points on the curve so the more points the better
x <- seq(-4, 4, length = 1000) * population_sd + population_mean
# Returns the height of the probably distribution at each of those points
y <- dnorm(x, population_mean, population_sd)
# Generate the plot, where:
# - type: the type of plot to be drawn where "n" means do not plot the points
# - xlab: the title of the x axis
# - ylab: the title of the y axis
# - main: the overall title for the plot
# - axes: when false it suppresses the axis automatically generated by the high level plotting function so that we can create custom axis
plot(x, y, type="n", xlab = "Height (inches)", ylab = "", main = "Distribution of Men's Heights", axes = FALSE)
# Connect all of the points with each other to form the bell curve
lines(x, y)
# Returns a vector of boolean values representing whether the x value is between the two bounds then
# filters the values so that only the ones within the bounds are returned
bounds_filter <- x >= lower_bound & x <= upper_bound
x_within_bounds <- x[bounds_filter]
y_within_bounds <- y[bounds_filter]
# We want the filled in area to extend all the way down to the y axis which is why these two lines are necessary
# It makes the first point in the polygon (lower_bound, 0) and the last point (upper_bound, 0)
x_polygon <- c(lower_bound, x_within_bounds, upper_bound)
y_polygon <- c(0, y_within_bounds, 0)
polygon(x_polygon, y_polygon, col = "red")
# Now determine the probability that someone falls between the two bounds so we can display it above the curve
# Remember that pnorm returns the probability that a normally distributed random number will be less than the given number
probability_within_bounds <- pnorm(upper_bound, population_mean, sd) - pnorm(lower_bound, population_mean, population_sd)
# Concatenate the various values so we can display it on the curve
text <- paste("p(", lower_bound, "< height <", upper_bound, ") =", signif(probability_within_bounds, digits = 3))
# Display the text on the plot. The default "side" parameter is 3, representing the top of the plot.
mtext(text)
# Add an axis to the current plot, where:
# - side: which side of the plot the axis should be drawn on where 1 represents the bottom
# - at: the points at which the tick-marks are to be drawn
# - pos: the coordinate at which the axis line is to be drawn
sd_axis_bounds = 5
axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean, sd_axis_bounds * population_sd + population_mean, by = population_sd)
axis(side = 1, at = axis_bounds, pos = 0)
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
survey1_p <- 0.41
survey1_n <- 407
survey2_p <- 0.5
survey2_n <- 178
survey1_sd <- sqrt((survey1_p*(1-survey1_p))/survey1_n)
survey2_sd <- sqrt((survey2_p*(1-survey2_p))/survey2_n)
survey1_graph_min <- survey1_p - 3*survey1_sd
survey1_graph_max <- survey1_p + 3*survey1_sd
survey2_graph_min <- survey2_p - 3*survey2_sd
survey2_graph_max <- survey2_p + 3*survey2_sd
graph_min <- min(survey1_graph_min,survey2_graph_min)
graph_max <- max(survey1_graph_max,survey2_graph_max)
x <- seq(graph_min,graph_max,length=1000)
x <- seq(0,1,length=1000)
survey1_x <- seq(survey1_p-2*survey1_sd,survey1_p+2*survey1_sd,length=1000)
survey2_x <- seq(survey2_p-2*survey2_sd,survey2_p+2*survey2_sd,length=1000)
survey1_y <- dnorm(x,survey1_p,survey1_sd)
survey2_y <- dnorm(x,survey2_p,survey2_sd)
survey1_y <- dnorm(survey1_x,survey1_p,survey1_sd)
survey2_y <- dnorm(survey2_x,survey2_p,survey2_sd)
y_max <- ceiling(max(survey1_y,survey2_y))
y <- y_max/(x[length(x)]-x[1])*
(x-x[1])
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = TRUE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))
?seq
t <- seq(0,1,0.01)
axis(1, at = t)
axis(1, at = seq(0, 1, 0.01), labels = seq(0,1,0.1))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = TRUE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.1))
axis(1, at = seq(0, 1, 0.5))
axis(1, at = seq(0, 1, 0.5), label = c(0,,1))
axis(1, at = seq(0, 1, 0.5), label = c(0,NULL,1))
axis(1, at = seq(0, 1, 0.5), label = c("0","","1"))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = TRUE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = c("0","","1"))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = TRUE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = c("0","","1"))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = TRUE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = c("0","","1"))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = c("0","","1"))
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = c("0","aap","1"))
t <- seq(0,1,0.01)
u <- as.character(t)
?mod
?%%
0.01/0.1
is.integer(0.01/0.1)
is.integer(0.1/0.1)
0.01 %% 0.1
0.1 %% 0.1
0.2 %% 0.1
0.12 %% 0.1
t <- seq(0,1,NULL,0.01)
t <- seq(0,1,NULL,0.01)
t <- seq(0,1,,0.01)
t <- seq(0,1,0.01)
t <- seq(0,1,NA,0.01)
t <- c(0,1,NA,0.01)
u <- as.character(t)
u
t <- c(0,NA,1)
u <- as.character(t)
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = u)
t <- seq(0,1,0.01)
u <- t %% 0.1
u
?if
?if
?if
u
u <- t[t %% 0.1 == 0]
t
u[u %% 0.1 != 0] <- NA
t <- seq(0,1,0.01)
u <- t
u[u %% 0.1 != 0] <- NA
u
u <- as.character(u)
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = seq(0, 1, 0.5), label = u)
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = t, label = u)
t <- seq(0,1,0.01)
u <- t
u[u %% 0.1 != 0] <- NA
u
0.3 %% 0.1
0.4 %% 0.1
0.3/0.1
0.31/0.1
.3 %% .1
.6 %% .1
.9 %% .1
?round
round(.3,digits=1) %% .1
round(.3,digits=1)
.3 %/% .1
.31 %/% .1
.31 %/% .1
.3 %/% .1
.3 / .1
round(.3 / .1)
round(.3 %/% .1)
3 %/% 1
.3 %/% .1
3.1 %/% 1
3.1 %% 1
3 %% 1
t <- seq(0,1,0.01)
u <- t
u[10 * u %% 1 != 0] <- NA
u
u <- t
t <- seq(0,1,0.01)
u <- t
u
u[10 * u %% 1 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
10 * u %% 1
u <- t
u
10 * u %% 0.1
u[10 * u %% 0.1 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
u[100 * u %% 1 != 0] <- NA
t <- seq(0,1,0.01)
u <- t
100 * u
u[100 * u %% 10 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
100 * u
t <- seq(0,1,0.01)
u <- t
100 * u %% 10
t <- seq(0,1,0.01)
u <- t
u
100 * u %% 10
t <- seq(0,1,0.01)
u <- t
u
100 * u
10 %% 10
100 * u %% 10
u[100 * u %% 10]
u
100 * u
u
100 * u
u / 10
(100 * u)
(100 * u) %% 10
u[(100 * u) %% 10 != 0] <- NA
u
u[(10 * u) %% 1 != 0] <- NA
u[(1 * u) %% 0.1 != 0] <- NA
u[(u) %% 0.1 != 0] <- NA
u[u %% 0.1 != 0] <- NA
u[u %% 0.1 != 0] <- NA
u <- as.character(u)
t <- seq(0,1,0.01)
u[u %% 0.1 != 0] <- NA
u <- as.character(u)
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = t, label = u)
t <- seq(0,1,0.01)
t <- seq(0,1,0.01)
u[u %% 0.1 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
u[u %% 0.1 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
u[(1 * u) %% 0.1 != 0] <- NA
u
t <- seq(0,1,0.01)
u <- t
u[(10 * u) %% 1 != 0] <- NA
u
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = t, label = u)
t <- seq(0,1,0.01)
u <- t
u[(100 * u) %% 10 != 0] <- NA
u
plot(x,y,type="n", xlab = "", ylab = "",
main = "", axes = FALSE)
lines(survey1_x,survey1_y,xlab="",ylab="",col="blue",lwd=4)
lines(survey2_x,survey2_y,xlab="",ylab="",col="red",lwd=4)
segments(survey1_p,0,survey1_p,max(survey1_y),col="blue",lwd=3,lty=2)
segments(survey2_p,0,survey2_p,max(survey2_y),col="red",lwd=3,lty=2)
axis(1, at = t, label = u)
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/Test2')
runApp('Coursera/Developing Data Products/Test')
runApp('Coursera/Developing Data Products/Test')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/Test1')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
shiny::runApp('Coursera/Developing Data Products/TestingPercentages')
round(150.25)
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
runApp('Coursera/Developing Data Products/TestingPercentages')
library(slidify)
getwd()
setwd("~/Coursera/Developing Data Products")
getwd()
author("Testing_Proportions_App_Pres")
---
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       : Testing Proportions App
subtitle    : Assignment for Coursera Developing Data Products Course
author      : Roland Nieuwenhuizen
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : [mathjax]    # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       : Testing Proportions App
subtitle    : Assignment for Coursera Developing Data Products Course
author      : Roland Nieuwenhuizen
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : [mathjax]    # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       : Testing Proportions App
subtitle    : Assignment for Coursera Developing Data Products Course
author      : Roland Nieuwenhuizen
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : [mathjax]    # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
---
title       : First test
subtitle    : part of Coursera course
author      : Roland Nieuwenhuizen
job         : Research Manager
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : [mathjax]    # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
logo        : Aap.jpg
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
$$x^2$$
```{r}
x <- 1+1
x
```
